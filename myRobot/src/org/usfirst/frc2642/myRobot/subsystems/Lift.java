package org.usfirst.frc2642.myRobot.subsystems;

import org.usfirst.frc2642.myRobot.PIDSpeedController;
import org.usfirst.frc2642.myRobot.RobotMap;
import org.usfirst.frc2642.myRobot.commands.*;
import org.usfirst.frc2642.myRobot.commands.Lift.LiftOverride;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Lift extends Subsystem {
	
    Talon lift = RobotMap.liftMotor;
    DigitalInput topLimit = RobotMap.topLimit;
    DigitalInput bottomLimit = RobotMap.bottomLimit;
    DigitalInput recieve = RobotMap.toteInRobot;
    DigitalInput lot = RobotMap.lotOfTotes;
    Encoder liftEncoder = RobotMap.liftEncoder;
    PIDSpeedController pid = new PIDSpeedController(liftEncoder, lift, "Lift", "Speed Control");
    
    /*
    public static DigitalInput topLimit;
    public static DigitalInput bottomLimit;
    public static DigitalInput toteInRobot;
    public static DigitalInput lotOfTotes;
    public static Encoder liftEncoder;
    public static Encoder backLiftEncoder;
    public static Encoder frontLiftEncoder;
	 */

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new LiftOverride());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void setPIDConstants() {
		double p = Preferences.getInstance().getDouble("LiftSpeedP", 0);
		double i = Preferences.getInstance().getDouble("LiftSpeedI", 0);
		double d = Preferences.getInstance().getDouble("LiftSpeedD", 0);
		double f = Preferences.getInstance().getDouble("LiftSpeedF", 0);

		pid.setConstants(p, i, d, f);

		liftEncoder.setDistancePerPulse(Preferences.getInstance().getDouble(
				"Lift" + "LiftDistPerPulse", 1));
	}
    
    private double getLiftSpeed() {
    	return Math.max(Preferences.getInstance().getDouble("LiftSpeed", 0), 0);
	}
    
    public void moveLiftUp(double speed) {
    	pid.set(-getLiftSpeed());
    }
    
    public void moveLiftDown(double speed) {
    	pid.set(getLiftSpeed());
    }
    
    public double getLiftEncoder() {
    	return liftEncoder.getDistance();
    }
    
    public boolean getToteInRobot() {
    	return recieve.get();
    }
    
    public boolean getTopLimit() {
    	return topLimit.get();
    }
    
    public boolean getBottomLimit() {
    	return bottomLimit.get();
    }
    
    public boolean getFiveIn() {
    	return lot.get();
    }
    
    public void moveLiftToPos(double position) {
    	double tolerance = 10;
    	if (liftEncoder.getDistance() > position + tolerance) {
    		pid.set(getLiftSpeed());
    	} else if (liftEncoder.getDistance() < position - tolerance) {
    		pid.set(-getLiftSpeed());
    	}
    }
    
}

